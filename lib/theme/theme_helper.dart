import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray30001,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.whiteA700;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.whiteA700;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.gray100,
      ),
      dividerTheme: DividerThemeData(
        thickness: 16,
        space: 16,
        color: appTheme.blueGray90001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 16.fSize,
          fontFamily: 'Abel',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 14.fSize,
          fontFamily: 'Abel',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 12.fSize,
          fontFamily: 'Abel',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 30.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 24.fSize,
          fontFamily: 'Abel',
          fontWeight: FontWeight.w400,
        ),
        labelMedium: TextStyle(
          color: Color(0XFF000000),
          fontSize: 10.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF00B74C),
    secondaryContainer: Color(0XFF999999),

    // On colors(text colors)
    onPrimary: Color(0XFF292D32),
    onPrimaryContainer: Color(0XFFF5F5F5),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => Color(0XFFF0C414);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue100 => Color(0XFFCED9FD);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray700 => Color(0XFF3E4B78);
  Color get blueGray900 => Color(0XFF2A2D34);
  Color get blueGray90001 => Color(0XFF333333);

  // DeepOrange
  Color get deepOrangeA70059 => Color(0X59E31515);

  // Gray
  Color get gray100 => Color(0XFFF3F3F3);
  Color get gray300 => Color(0XFFE1E2E2);
  Color get gray30001 => Color(0XFFDDDDDD);
  Color get gray50 => Color(0XFFFAFAFA);
  Color get gray600 => Color(0XFF6A6C71);
  Color get gray60001 => Color(0XFF737986);
  Color get gray700 => Color(0XFF666666);

  // Grayd
  Color get gray6003d => Color(0X3D767680);

  // Green
  Color get green50 => Color(0XFFEAF2E8);
  Color get green900 => Color(0XFF127331);
  Color get green90001 => Color(0XFF16612B);

  // Indigo
  Color get indigo50 => Color(0XFFEBEBF5);
  Color get indigo5001 => Color(0XFFE2E8F0);

  // LightBlue
  Color get lightBlue600 => Color(0XFF0A9EEB);

  // LightGreen
  Color get lightGreen800 => Color(0XFF536B40);

  // LightGreenAc
  Color get lightGreenA7006c => Color(0X6C17F804);

  // Lime
  Color get lime900 => Color(0XFFAC682A);

  // Orange
  Color get orange100 => Color(0XFFF9CBA0);

  // Red
  Color get redA700 => Color(0XFFFF0606);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
